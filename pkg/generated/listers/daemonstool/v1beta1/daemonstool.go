/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "my-controller/pkg/apis/daemonstool/v1beta1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DaemonstoolLister helps list Daemonstools.
// All objects returned here must be treated as read-only.
type DaemonstoolLister interface {
	// List lists all Daemonstools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Daemonstool, err error)
	// Daemonstools returns an object that can list and get Daemonstools.
	Daemonstools(namespace string) DaemonstoolNamespaceLister
	DaemonstoolListerExpansion
}

// daemonstoolLister implements the DaemonstoolLister interface.
type daemonstoolLister struct {
	indexer cache.Indexer
}

// NewDaemonstoolLister returns a new DaemonstoolLister.
func NewDaemonstoolLister(indexer cache.Indexer) DaemonstoolLister {
	return &daemonstoolLister{indexer: indexer}
}

// List lists all Daemonstools in the indexer.
func (s *daemonstoolLister) List(selector labels.Selector) (ret []*v1beta1.Daemonstool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Daemonstool))
	})
	return ret, err
}

// Daemonstools returns an object that can list and get Daemonstools.
func (s *daemonstoolLister) Daemonstools(namespace string) DaemonstoolNamespaceLister {
	return daemonstoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DaemonstoolNamespaceLister helps list and get Daemonstools.
// All objects returned here must be treated as read-only.
type DaemonstoolNamespaceLister interface {
	// List lists all Daemonstools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Daemonstool, err error)
	// Get retrieves the Daemonstool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Daemonstool, error)
	DaemonstoolNamespaceListerExpansion
}

// daemonstoolNamespaceLister implements the DaemonstoolNamespaceLister
// interface.
type daemonstoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Daemonstools in the indexer for a given namespace.
func (s daemonstoolNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Daemonstool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Daemonstool))
	})
	return ret, err
}

// Get retrieves the Daemonstool from the indexer for a given namespace and name.
func (s daemonstoolNamespaceLister) Get(name string) (*v1beta1.Daemonstool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("daemonstool"), name)
	}
	return obj.(*v1beta1.Daemonstool), nil
}
